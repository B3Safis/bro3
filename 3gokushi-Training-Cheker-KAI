// ==UserScript==
// @name           3gokushi-Training-Cheker-KAI
// @version        2015.12.18
// @description    育成チェックツール（改）
// @include		http://*.3gokushi.jp/user/
// @include		http://*.3gokushi.jp/user/index.php
// @include		http://*.3gokushi.jp/user/#*
// @require		http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js
// @require		http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js
// @resource	CSS	http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/themes/sunny/jquery-ui.css
// @grant		GM_xmlhttpRequest
// @grant		GM_addStyle
// @grant		GM_getResourceText
// @grant		GM_deleteValue
// @grant		GM_getValue
// @grant		GM_listValues
// @grant		GM_log
// @grant		GM_setValue
// @grant		GM_xmlhttpRequest
// ==/UserScript==

/*
2015.2.22 	作成
2015.3.12 	URLをプレーヤー名毎に保存するように変更
2015.3.14 	ダイアログ表示位置調整
2015.6.25 	動かなくなっていたので修正
2015.9.29	速度課金対応
2015.11.11	動かなくなっていたので修正

本ツールは同盟メンバに対して、同盟のもとめる育成を指南し、状況を把握する目的のものです。
サーバにはチェック結果は残りますがデータベース化をしているわけではありません。
同盟員以外の方がつかって勝手にデータ集めてる等騒ぐのはおやめ下さい。
自身のデータチェックツールとしてご活用ください。

*/

jQuery.noConflict();
j$ = jQuery;


var d = document;
var $i = function(id) { return d.getElementById(id); };
var $x = function(xp,dc) { return d.evaluate(xp, dc||d, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue; };
var $a = function(xp,dc) { var r = d.evaluate(xp, dc||d, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null); var a=[]; for(var i=0; i<r.snapshotLength; i++){ a[a.length]=r.snapshotItem(i); } return a; };
var $e = function(e,t,f) { if (!e) return; e.addEventListener(t, f, false); };

var cgi_url = "http://www.usachanpeace.com/cgi/status_monkey/status.cgi";

//スキル用のクラス
var Skill = function(name,detail){
	this.name=name;
	this.detail=detail;
};

var Busyo = function(id, rare, name, lv, cost, heika, kougeki, tiryoku, hobou, yaribou, yumibou, kibou, sokudo, exp, score, skill1, skill2, skill3, skill4){
	this.id = id;
	this.rare = rare;
	this.name = name;
	this.lv = lv;
	this.cost = cost;
	this.heika = heika;
	this.kougeki = kougeki;
	this.tiryoku = tiryoku;
	this.hobou = hobou;
	this.yaribou = yaribou;
	this.yumibou = yumibou;
	this.kibou = kibou;
	this.sokudo = sokudo;
	this.exp = exp;
	this.score = score;
	this.skill = new Array(skill1, skill2, skill3, skill4);
};

var Postdata = function(name, union, cost, k_kakin, b_kakin, s_kakin, data){
	this.name = name;
	this.union = union;
	this.cost = cost;
	this.k_kakin = k_kakin;
	this.b_kakin = b_kakin;
	this.s_kakin = s_kakin;
	this.busyo = data;
};

var loaded=0;
var pages=0;

var player;
var union;
var busyo = [];

GM_addStyle(GM_getResourceText('CSS'));

addForm();

var str = $x("//table[@class='commonTables']//td[contains(./text(),'君主')]/following-sibling::td",d);
if(!str)return;
player = str.innerHTML.replace(/[\t\n\r\f]/g,"");
console.log("君主名:"+player);

str = $x("//table[@class='commonTables']//td[contains(./text(),'同盟')]/following-sibling::td/a",d);
if(!str)return;
union = str.innerHTML.replace(/[\t\n\r\f]/g,"");
console.log("同盟:"+union);

disp_button();
if (window.navigator.userAgent.toLowerCase().indexOf('firefox') == -1) {
	$i("Training_info").innerHTML = "Firefoxのみ対応です。Firefoxで動かして下さい。";
	return
}

setDialog();

function setCss(){
console.log("css");
	j$("label").css("display", "block");
	j$("input").css("display", "block");
	j$("input.text").css("margin-bottom", "12px", "widhth", "95%", "padding", "4em");
	j$("fieldset").css("padding", "0", "border", "0", "margin-top", "25px");
	j$(".ui-dialog .ui-state-error").css("padding","3em");
	j$(".validateTips").css("border", "1px solid transparent", "padding", "0.3em");
}

function disp_button(){
	var targetNode = $a("//ul[@id='statMenu']",d);
	var getInfoBtn = d.createElement("input");
		getInfoBtn.type = "button";
		getInfoBtn.id = "getInformation";
		getInfoBtn.value = "【データ取得】";
//		getInfoBtn.addEventListener("click", function() {
//			var val = prompt("育成データ用パスワードを入れて下さい","");
//			if (!val) { return; }
//			getTraining(str);
//		}, false);
	var div1 = d.createElement("div");
	var info = d.createElement("span");

		info.innerHTML = "前回実施結果：" + cloadData("Traning_url_"+player, "実行なし");
		info.id = "Training_info";

	div1.appendChild(getInfoBtn);
	div1.appendChild(info);
	targetNode[1].appendChild(div1);
	
}


function setDialog() {
	var dialog, form,

	cost = j$( "#cost" ),
	k_kakin = j$( "input[name='k_kakin']:checked" ),
	b_kakin = j$( "input[name='b_kakin']:checked" ),
	s_kakin = j$( "input[name='s_kakin']:checked" ),
	tips = j$( ".validateTips" );


	function updateTips( t ) {
		tips
		.text( t )
		.addClass( "ui-state-highlight" );
		setTimeout(function() {
			tips.removeClass( "ui-state-highlight", 1500 );
		}, 500 );
	}

	function checkVal( o, n, min, max ) {
		if ( parseInt(o.val()) > max || parseInt(o.val())< min ) {
			updateTips( n + "は" +
			  min + " と " + max + "の範囲で入力してください。" );
			return false;
		} else {
			return true;
		}
	}

	function checkRegexp( o, regexp, n ) {
		if ( !( regexp.test( o.val() ) ) ) {
			updateTips( n );
		return false;
		} else {
			return true;
		}
	}

	function addUser() {
		var valid = true;

		valid = valid && checkRegexp( cost, /(\d)+$/, "デッキコストは数字で入力してください。" );
		valid = valid && checkVal( cost, "デッキコスト", 15, 25 );

		if ( valid ) {
			dialog.dialog( "close" );
			$i("getInformation").disabled = true;
			getTraining();
		}
		return valid;
	}


	dialog = j$( "#dialog-form" ).dialog({
		autoOpen: false,
		height: 300,
		width: 350,
		modal: true,
		position: {
			of : '#getInformation',
			at: 'center bottom',
			my: 'left top'
		},
		zIndex : 1000,
		buttons: {
			"OK": addUser,
			Cancel: function() {
			  dialog.dialog( "close" );
			}
		},
		close: function() {
		}
	});

	form = dialog.find( "form" ).on( "submit", function( event ) {
		event.preventDefault();
		addUser();
	});

	j$( "#getInformation" ).button().on( "click", function() {
		dialog.dialog( "open" );
	});
}

function addForm()
{
	var div = d.createElement("div");
		div.id = "dialog-form";
		div.title = "課金情報入力";
	var p = d.createElement("p");
		p.className = "validateTips";
		p.innerHTML = "有事（戦争時）の課金状況を教えてください。デッキコストは最大時でよいです。";
		p.style.display = "block";
	var form = d.createElement("form");
	var fieldset = d.createElement("fieldset");
		fieldset.style.cssText = "padding:0; border:0; margin-top:10px;";


	var label1 = d.createElement("label");
		label1.setAttribute("for","cost");
		label1.innerHTML = "デッキコスト<br>";
		label1.style.display = "block";
		label1.style.cssText = "padding:0; border:0; margin-top:25px; display:block";
	var input1 = d.createElement("input");
		input1.type = "text";
		input1.name = "cost";
		input1.id = "cost";
		input1.value = "25";

	var label2 = d.createElement("label");
		label2.setAttribute("for","k_kakin");
		label2.innerHTML = '攻撃課金 <input type="radio" name="k_kakin" value="1" id="k_kakin_1" checked="checked"> 課金 <input type="radio" name="k_kakin" value="0" id="k_kakin_1">非課金';
		label2.style.display = "block";
//		label2.style.cssText = "padding:0; border:0; margin-top:25px; display:block;";

	var label3 = d.createElement("label");
		label3.setAttribute("for","b_kakin");
		label3.innerHTML = '防御課金 <input type="radio" name="b_kakin" value="1" id="b_kakin_1" checked="checked"> 課金 <input type="radio" name="b_kakin" value="0" id="b_kakin_1">非課金';

		label3.style.display = "block";
//		label3.style.cssText = "padding:0; border:0; margin-top:25px; display:block;";

	var label4 = d.createElement("label");
		label4.setAttribute("for","s_kakin");
		label4.innerHTML = '速度課金 <input type="radio" name="s_kakin" value="1" id="s_kakin_1" checked="checked"> 課金 <input type="radio" name="s_kakin" value="0" id="s_kakin_1">非課金';

		label4.style.display = "block";
//		label4.style.cssText = "padding:0; border:0; margin-top:25px; display:block;";


	var input4 = d.createElement("input");
		input4.type = "submit";
		input4.tabindex = "-1";
		input4.style.position = "absolute";
		input4.style.top = "-1000px";
	
	fieldset.appendChild(label1);
	fieldset.appendChild(input1);
	fieldset.appendChild(label2);
	fieldset.appendChild(label3);
	fieldset.appendChild(label4);
	fieldset.appendChild(input4);
	form.appendChild(fieldset);
	div.appendChild(p);
	div.appendChild(form);
	
	d.body.appendChild(div);
}

function getTraining(){
	
	$i("Training_info").innerHTML = "デッキ情報取得中";
//	getKakin();
	getCardlists();
	
}


function getCardlists(){

	pages=loaded=0;

	var host = window.location.hostname;
	host = 'http://' + host + '/card/deck.php?';

	//1ページ目取得
	var opt = {
		method: 'get',
		url: host,
		onload: function(res) {
			var htmldoc = d.createElement("html");
			htmldoc.innerHTML = res.responseText;
			
//			var str = $x("//div[@class='number cost clearfix']//span[@class='volume']",htmldoc).innerHTML;
//			str.match(/\d+ \/ (\d+)/);
//			cost = RegExp.$1;

//console.log("cost:"+cost);

			makeCard(htmldoc,true);
			
			var lastpage=$x('//ul[contains(@class, "pager")][1]//li[contains(@class, "last")]//a[@title="last page"]',htmldoc);

			//ページが12未満かな
			if(lastpage == null ){
				lastpage=$x('//ul[contains(@class, "pager")][1]//li[last()-1]/a',htmldoc);
			}
			//1ページしか無い
			if(lastpage == null ){
				pages=1;
				updateProgress();
			}else{
				lastpage.href.match(/(^.+[\?|&])p=(\d+)(.+$)/);
				pages=RegExp.$2;
				var maxpage=RegExp.$2;
				domain = host;
				last_domain = RegExp.$3;
				
				updateProgress();
				for(var i=2;i<=maxpage;i++){
					loadPage(i,domain,last_domain,maxpage);
				}
			}
		}
	};
	GM_xmlhttpRequest(opt);
}

function loadPage(page,domain,last_domain,pagemax)
{
console.log(page + "/" + pagemax);
	url=domain + 'p='+page+ last_domain;
	console.log(url);
	var opt = {
		method: 'get',
		url: url,
		onload: function(res) {
			var htmldoc = d.createElement("html");
			htmldoc.innerHTML = res.responseText;
			
			makeCard(htmldoc,false);
			updateProgress();
		}
	};
	GM_xmlhttpRequest(opt);
}

function updateProgress(){
	loaded+=1;
	var id = 'Training_Check';

console.log("loaded/pages:"+loaded+"/"+pages);
	if(pages==loaded){
		$i("Training_info").innerHTML="デッキ情報取得完了";
		buildList();

	} else{
		$i("Training_info").innerHTML='デッキ情報読み込み '+loaded+'/'+pages;
	}
}

function makeCard(html,firstpage){

console.log("makeCard");
	
	var temp = null;
	var pre_fix;

	if(firstpage){
		pre_fix = "#card_uraomote .cardColmn";
		}
	else{
		pre_fix = "#rotate .cardColmn";
	}

	var deck = j$(pre_fix, html);
//	deck = deck.add(j$(".card_wrapper_v2", html));
console.log(deck.length);
	for(i=0; i < deck.length; i++){
//console.log("deck["+i+"]"+deck[i].innerHTML);
		var id = j$(".cardno", deck[i]).text();
		var rare = j$(".rarerity img", deck[i]).attr("title");
		var name = j$("span.name-for-sub", deck[i]).text();
		var lv = j$(".level span", deck[i]).text();
		var cost = j$(".cost-for-sub", deck[i]).text();
		var heika = j$(".soltype-for-sub img", deck[i]).attr("title");
		var kougeki = j$(".status_att", deck[i]).text();
		var tiryoku = j$(".status_int", deck[i]).text();
		var hobou = j$(".status_wdef", deck[i]).text();
		var yaribou = j$(".status_sdef", deck[i]).text();
		var yumibou = j$(".status_bdef", deck[i]).text();
		var kibou = j$(".status_rdef", deck[i]).text();
		var sokudo = j$(".status_speed", deck[i]).text();
		var exp = j$(".ex_now", deck[i]).text().replace(/経験値:/,"");
		var score = j$(".score", deck[i]).text().replace(/スコア:/,"");
		
		var skill1;
		var skill2;
		var skill3;
		var skill4;

		var skill1_info = j$(".skill1",deck[i]);
		if(skill1_info){
			var skill1_name = skill1_info.prev("span").text();
			skill1 = new Skill(skill1_name,skill1_info.text());
		}
		var skill2_info = j$(".skill2",deck[i]);
		if(skill2_info){
			var skill2_name = skill2_info.prev("span").text();
			skill2 = new Skill(skill2_name,skill2_info.text());
		}
		var skill3_info = j$(".skill3",deck[i]);
		if(skill3_info){
			var skill3_name = skill3_info.prev("span").text();
			skill3 = new Skill(skill3_name,skill3_info.text());
		}
		var skill4_info = j$(".skill4",deck[i]);
		if(skill4_info){
			var skill4_name = skill4_info.prev("span").text();
			skill4 = new Skill(skill4_name,skill4_info.text());
		}

		busyo[busyo.length] = new Busyo(id, rare, name, lv, cost, heika, kougeki, tiryoku, hobou, yaribou, yumibou, kibou, sokudo, exp, score, skill1, skill2, skill3, skill4);
//console.log(busyo[busyo.length-1]);

	}


}

function buildList(){
console.log("buildList");
	var cost = j$( "#cost" ).val();
	var k_kakin = j$( "input[name='k_kakin']:checked" ).val();
	var b_kakin = j$( "input[name='b_kakin']:checked" ).val();
	var s_kakin = j$( "input[name='s_kakin']:checked" ).val();

	$i("Training_info").innerHTML="データ送信中";

console.log("武将数"+busyo.length);

	var postdata = new Postdata(player,union, cost, k_kakin, b_kakin, s_kakin, busyo);
	j$.support.cors = true;

	j$.ajax({
		type: 'POST',
		url: cgi_url,
		dataType: 'html',
		contentType: 'application/json',
		data: JSON.stringify(postdata)
	})
	.done(function(data){
		$i("Training_info").innerHTML="結果："+data;
		$i("getInformation").disabled = false;
		csaveData("Traning_url_"+player, data);
///
///
///
///
    var Text_Area;
 Text_Area="<textarea cols=80 rows=20>";
 for(i=0; i < busyo.length; i++){
 Text_Area=Text_Area+busyo[i].id+"\t"+busyo[i].rare+"\t"+busyo[i].name+"\t"+busyo[i].lv+"\t"+busyo[i].cost+"\t"+busyo[i].heika+"\t"+busyo[i].kougeki+"\t"+busyo[i].tiryoku+"\t"+busyo[i].hobou+"\t"+busyo[i].yaribou+"\t"+busyo[i].yumibou+"\t"+busyo[i].kibou+"\t"+busyo[i].sokudo+"\t"+busyo[i].exp+"\t"+busyo[i].score;
 for(j=0; j < 4; j++){
     if(busyo[i].skill[j].name.indexOf("LV")!=-1)
            Text_Area=Text_Area+"\t"+busyo[i].skill[j].name;
        else
            Text_Area=Text_Area+"\t";
    }
 for(j=0; j < 4; j++){
     if(busyo[i].skill[j].name.indexOf("LV")!=-1)
            Text_Area=Text_Area+"\t"+busyo[i].skill[j].detail;
        else
            Text_Area=Text_Area+"\t";
    }
 Text_Area=Text_Area+"&#13;";
 }
 Text_Area=Text_Area+"</textarea>";
 $i("Training_info").innerHTML=Text_Area;
///
///
///
///
		busyo = [];
	})
	.fail(function(xhr, data, textStatus){
		$i("Training_info").innerHTML='エラー';
		$i("getInformation").disabled = false;
		busyo = [];
	});
}

function csaveData(key, value, local, ev) {
	if (local) key = location.hostname + key;
	if (ev) {
	    value = crossBrowserUtility.JSON.stringify(value);
	}
	GM_setValue(key, value);
}

function cloadData(key, value, local, ev) {
	if (local) key = location.hostname + key;
	var ret = GM_getValue(key, value);
	return ev ? crossBrowserUtility.JSON.parse(ret) : ret;
}
